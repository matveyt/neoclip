*neoclip.txt*	Neovim clipboard provider

==============================================================================
OVERVIEW							     *neoclip*

|Neoclip| is a clipboard provider for Neovim |provider-clipboard|. It allows
to access system clipboard without any external tools, such as `win32yank`,
`xclip`, `xsel`, `pbcopy`, `pbpaste` etc.

Supported platforms are Windows, macOS and *nix (with X11 or Wayland).

==============================================================================
BUILDING						       *neoclip-build*

|Neoclip| has to be built from source. So you'll need C (or Objective C for
macOS) compiler and tools installed on your machine.

You'll also need a project build tool. Both CMake https://cmake.org and
Meson https://mesonbuild.com will do.

The common build pre-requisite for all platforms is LuaJIT https://luajit.org.
This is because we're going to make a Lua binary extension module for Neovim's
builtin engine. The exact package name and installation method depends on your
OS/distro. For example, on Debian GNU/Linux it could be >

    $sudo apt install libluajit-5.1-dev

Hopefully, it's enough for both Windows and macOS. But on *nix we need also
threads, X11 and Wayland client libraries. Some of them may already be
installed, while some are not. An example suitable for Debian GNU/Linux >

    $sudo apt install libx11-dev libwayland-dev

And the final point. CMake doesn't support Wayland libraries out-of-the-box.
So building the project with CMake may require installing ECM (aka Extra CMake
Modules) package as well. Otherwise neoclip/Wayland module could be quietly
skipped. >

    $sudo apt install extra-cmake-modules

So finally we should be able to build our project (this is for CMake with
Ninja as a backend): >

    $ cd ~/.config/nvim/pack/bundle/opt/neoclip/src
    $ cmake -B build -G Ninja && ninja -C build install/strip

Now run Neovim and do |:checkhealth| to see if the clipboard provider has been
set up properly.

==============================================================================
KNOWN ISSUES						      *neoclip-issues*

					      *neoclip-gnome* *neoclip-weston*
neoclip/Wayland module requires wlr-data-control protocol
https://wayland.app/protocols/wlr-data-control-unstable-v1. If your Wayland
compositor does not provide it then neoclip/X11 will be tried instead.

								 *neoclip-wsl*
|Neoclip| can run under Windows Subsystem for Linux, assuming WSLg is also
there. However, the three clipboards (Windows, X11 and Wayland) are
synchronized strangely, to say the least. Nothing can be done right now,
except waiting for patches and hoping for the best.

Also to remember that WSLg Wayland composer is based on Weston, so
neoclip/Wayland module will never work on WSL. Use neoclip/X11 instead.

							*neoclip-targets-atom*
This is an experimental feature for X11 platform only. By default |neoclip|
responds to TARGETS selection request using the same TARGETS atom. Force use
of ATOM atom instead with >
    " in VimScript
    let g:neoclip_targets_atom = 1

    -- or in Lua
    vim.g.neoclip_targets_atom = true
<
Note that in both cases some programs may fail to communicate properly. See,
for example, http://www.edwardrosten.com/code/x11.html

==============================================================================
 vim:tw=78:ts=8:noet:ft=help:norl:
