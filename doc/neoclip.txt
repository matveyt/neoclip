*neoclip.txt*	Neovim clipboard provider

                                      Type |gO| to see the table of contents.

==============================================================================
OVERVIEW							     *neoclip*

|Neoclip| is a clipboard provider for Neovim |provider-clipboard|. It allows
to access system clipboard without any external tools, such as `win32yank`,
`xclip`, `xsel`, `pbcopy`, `pbpaste` etc.

Supported platforms are Windows, macOS and *nix (with X11 or Wayland).

==============================================================================
BUILDING						       *neoclip-build*

|Neoclip| must be built from source. So you'll need C (or Objective C for
macOS) compiler and tools installed on your machine.

You'll also need a project build tool. Both CMake https://cmake.org and
Meson https://mesonbuild.com are supported.

The common build pre-requisite for all platforms is LuaJIT https://luajit.org.
This is because we're going to make a Lua binary extension module for Neovim's
builtin engine. The exact package name and installation method depend on your
OS/distro. For example, on Debian GNU/Linux it could be >

    $sudo apt install libluajit-5.1-dev
<
Hopefully, it's enough for both Windows and macOS. But on *nix we need also
threads, X11 and Wayland client libraries. Some of them may already be
installed, while some are not. An example suitable for Debian GNU/Linux >

    $sudo apt install libx11-dev libwayland-dev
<
And the final point. CMake doesn't support Wayland libraries out-of-the-box.
So building the project with CMake may require installing ECM (aka Extra CMake
Modules) package as well. Otherwise neoclip/Wayland module would be quietly
skipped. >

    $sudo apt install extra-cmake-modules
<
So now we should be able to build our project >

    $ cd ~/.config/nvim/pack/bundle/opt/neoclip/src

    $ # by CMake
    $ cmake -B build
    $ cmake --build build
    $ cmake --install build --strip

    $ # ..or by Meson
    $ meson setup build
    $ meson install -C build --strip
<
Then run Neovim and type >

    :lua require"neoclip":setup()
    :checkhealth neoclip
<
to see if everything went okay.

==============================================================================
FUNCTIONS						   *neoclip-functions*

|Neoclip| stores its module table in a global Lua variable named |neoclip|. It
has the following fields.

							      |neoclip.driver|
  This is the binary module doing the real job. You can also call it directly
  if you wish so. Its methods are >

  neoclip.driver.id()				-> string
  neoclip.driver.start()			-> boolean
  neoclip.driver.stop()				-> nil
  neoclip.driver.status()			-> boolean
  neoclip.driver.get(reg)			-> { string_array, type }
  neoclip.driver.set(reg, string_array, type)	-> boolean
<
  NOTE: start/stop/status are only functional under *nix OS. In Windows and
  macOS they are doing nothing.

							   |neoclip:require()|
  This method loads binary module into |neoclip.driver| variable. You seldom
  need it as |neoclip:setup()| calls it for you. >

  " force loading of X11 module only
  lua neoclip:require"neoclip.x11"
  lua neoclip:register()
<
							   |neoclip:register()|
  This method sets or resets |g:clipboard| variable activating the plugin.
  Usually, you want to call |neoclip:setup()| only. >

  " disable clipboard temporarily
  lua neoclip:register{false}

  " set default Neovim clipboard
  lua neoclip:register{}

  " get neoclip back
  lua neoclip:register()
<
							      |neoclip:setup()|
  This is the only method you need to add to your |config|. Basically, it is
  an equivalent of |neoclip:require()| followed by |neoclip:register()|.
  Optionally, it accepts driver name to pass to |neoclip:require()|. >

  " add this line to your config
  lua require"neoclip":setup()
<
==============================================================================
HEALTH							      *neoclip-health*

|Neoclip| implements Neovim |health| API. Run |:checkhealth| command to monitor its
current status.

==============================================================================
KNOWN ISSUES						      *neoclip-issues*

					      *neoclip-gnome* *neoclip-weston*
neoclip/Wayland module requires wlr-data-control protocol
https://wayland.app/protocols/wlr-data-control-unstable-v1. If your Wayland
compositor does not provide it then neoclip/X11 will be tried instead.

								 *neoclip-wsl*
For some obscure reason, WSLg/Weston/XWayland fails to read TARGETS response,
and so |neoclip| will not set native Windows Clipboard when run under WSL. If
you can figure why then, please, let me know.

							*neoclip-targets-atom*
This is an experimental feature for X11 platform only. By default |neoclip|
responds to TARGETS selection request with an atom of the type, well, ATOM.
This is what the standard says. But, if you need to, you may force usage of
TARGETS atom instead by adding this line of code >
    " in VimScript
    let g:neoclip_targets_atom = 0

    -- or in Lua
    vim.g.neoclip_targets_atom = false
<
==============================================================================
 vim:tw=78:ts=8:noet:ft=help:norl:
