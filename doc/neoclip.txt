*neoclip.txt*	Neovim clipboard provider

                                      Type |gO| to see the table of contents.

==============================================================================
OVERVIEW							     *neoclip*

|Neoclip| is a clipboard provider for Neovim |provider-clipboard|. It allows
to access system clipboard without any external tools, such as `win32yank`,
`xclip`, `xsel`, `pbcopy`, `pbpaste` etc.

Supported platforms are Windows, macOS and *nix (with X11 or Wayland).

==============================================================================
AUTOLOAD						    *neoclip-autoload*

|Neoclip| is loaded by default. You don't need to add anything to your
|config|. Yet if you wish to skip it then configure another
|provider-clipboard|. E.g., `:runtime autoload/provider/clipboard.vim` to use
Neovim's default instead.

If you share same |config| between Vim and Neovim then it is advisable to
install |neoclip| under `opt/` tree and use |:packadd| command >

    if has('nvim')
        packadd! neoclip
    endif
<
==============================================================================
BUILDING						       *neoclip-build*

|Neoclip| must be built from source. So you'll need C (or Objective C for
macOS) compiler and tools installed on your machine.

You also need a project build tool. Both CMake https://cmake.org and Meson
https://mesonbuild.com are supported.

The common build pre-requisite for all platforms is LuaJIT https://luajit.org.
This is because we're going to make a Lua binary extension module for Neovim's
builtin engine. The exact package name and installation method depend on your
OS/distro. For example, on Debian GNU/Linux it could be >

    $sudo apt install libluajit-5.1-dev
<
Hopefully, it's enough for both Windows and macOS. But on *nix we need also
threads, X11 and Wayland client libraries. Some of them may already be
installed, while some are not. An example suitable for Debian GNU/Linux >

    $sudo apt install libx11-dev libwayland-dev
<
And the final point. CMake doesn't support Wayland libraries out-of-the-box.
So building the project with CMake may require installing ECM (aka Extra CMake
Modules) package as well. Otherwise, neoclip/Wayland module would be quietly
skipped. >

    $sudo apt install extra-cmake-modules
<
So now we are able to build our project >

    $ cd ~/.config/nvim/pack/bundle/opt/neoclip/src

    $ # by CMake
    $ cmake -B build
    $ cmake --build build
    $ cmake --install build --strip

    $ # ..or by Meson
    $ meson setup build
    $ meson install -C build --strip
<
Then run Neovim and type >

    :checkhealth neoclip
<
to see if everything went okay.

==============================================================================
FUNCTIONS						   *neoclip-functions*

|Neoclip| returns a module table that has the following fields.

							      |neoclip.driver|
  This is a binary module doing real job. You can also call it directly if you
  wish so. The methods are >

  neoclip.driver.id()				-> string
  neoclip.driver.start()			-> nil or error
  neoclip.driver.stop()				-> nil
  neoclip.driver.status()			-> boolean
  neoclip.driver.get(reg)			-> {string_array, type}
  neoclip.driver.set(reg, string_array, type)	-> boolean
<
  NOTE: start/stop/status are only functional under *nix OS. In Windows and
  macOS they are doing nothing.

							   |neoclip.require()|
  This method loads binary module into |neoclip.driver| variable. You seldom
  need it as |neoclip.setup()| calls it for you. >

  -- force loading of X11 driver only
  local neoclip = require"neoclip"
  neoclip.require"neoclip.x11-driver"
  neoclip.register()
<
							   |neoclip.register()|
  This method sets or resets |g:clipboard| variable activating the plugin.
  Usually, you want to call |neoclip.setup()| only. >

  -- set Neovim default clipboard-tool
  require"neoclip".register{}

  -- get neoclip.driver back
  require"neoclip".register()
<
							      |neoclip.setup()|
  This method performs module initialization. Basically, it is an equivalent
  of |neoclip.require()| followed by |neoclip.register()|. Optionally, it also
  accepts driver name to pass to |neoclip.require()|. >

  -- load and register default driver
  require"neoclip".setup()
<
==============================================================================
HEALTH							      *neoclip-health*

|Neoclip| implements Neovim |health| API. Run |:checkhealth| command to monitor its
current status.

==============================================================================
KNOWN ISSUES						      *neoclip-issues*

					      *neoclip-gnome* *neoclip-weston*
neoclip/Wayland module requires wlr-data-control protocol
https://wayland.app/protocols/wlr-data-control-unstable-v1. If your Wayland
compositor does not provide it then neoclip/X11 will be loaded instead.

								 *neoclip-luv*
There are two new driver versions for *nix: `neoclip.wluv-driver` and
`neoclip.x11uv-driver`. They are still considered experimental and not used by
default. The main difference is that they depend on |luv-event-loop| not
requiring an extra thread. If you want to try it then pass the driver name
directly >

  require"neoclip".setup"neoclip.wluv-driver"
<
								 *neoclip-wsl*
There was a longstanding bug that made |neoclip| to fail on WSL. Now it's no
more! Still to remember that WSLg is based on Weston composer, so
|neoclip-weston| issue applies.

==============================================================================
 vim:tw=78:ts=8:noet:ft=help:norl:
